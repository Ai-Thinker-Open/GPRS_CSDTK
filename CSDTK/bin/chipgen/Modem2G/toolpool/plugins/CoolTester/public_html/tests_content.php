<br /><span class='test_section_main'> <a name='BOARD'> <h1> BOARD :</h1> </a></span><span class='text_main'> <a name='0'> <h2> Audio Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Audio Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | MANUAL </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Connecting the headphone and microphone to the board</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 360s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>The first test playing a sample. The second test playing a tone. And the last test to make a loopback.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='1'> <h2> Auto I2c Maxim Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Auto I2c Maxim Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>I2C Maxim chip on the board</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Write a value on right speak volume register, read this register and compare the value.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='2'> <h2> Auto Memory Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Auto Memory Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> <li class='parameter_li'><span class='parameter_name'>addr_begin</span> <span class='parameter_default'> ( default : 0 )</span> </li><span class='parameter_description'> Memory area check. Default value is a dynamic buffer allocated</span> <li class='parameter_li'><span class='parameter_name'>addr_end</span> <span class='parameter_default'> ( default : 0 )</span> </li><span class='parameter_description'> Memory area check. Default value is a dynamic buffer allocated</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Check an area memory. Write a patern and read it.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='3'> <h2> Gpo_Clk Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Gpo_Clk Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | MANUAL </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Connecting scope on the GPO1, GPO2 and DBGCLK</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 360s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>This test generate a square signal on GPO1 and GPO2 with a frequence of 50Hz and 25Hz. On DBGCLK, you must see the 32kHz clock on scope</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='4'> <h2> HelloWorld :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>HelloWorld</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | MANUAL </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>NONE</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 5s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> <li class='parameter_li'><span class='parameter_name'>numberOfprintedHelloWorld</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Number of 'Hello World' print on the LCD</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Print numberOfprintedHelloWorld 'HelloWord' on LCD screen. Check board LCD connection and font manager driver</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'>The user is asked to check whether the expected number of 'Hello World' has been printed</td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Board_Manual_HelloWorld.new( {:numberOfprintedHelloWorld=>5} ).process . The test try to print five 'Hello World' string on the LCD</td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Matthieu</td></tr></table><br /><span class='text_main'> <a name='5'> <h2> Key Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Key Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | MANUAL </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>NONE</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 30s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>The user is invited to press in order the key 1,2,3,4,5,6,7,8,9,*,0,#. Timeout after 20s</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='6'> <h2> Pll Auto Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Pll Auto Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>NONE</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Disable the PLL, reenable the PLL and measure the lock time of the PLL</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='7'> <h2> Rf Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Rf Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | MANUAL </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>RF chip</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>This test performs a loopback test on the RF I & Q analog interface.  The means and variances on the Rx ADC are calculated and reported to the tester.  This validates both the board connections as well as the Rx ADC in the chip.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='8'> <h2> Sim Auto Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Sim Auto Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Sim card support EPPS and Select command</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Reset the sim card (ATR) with different voltage (1.8V 3.0V 5.0V), send a EPPS command, send a Select command and check the reponse</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><span class='text_main'> <a name='9'> <h2> Uart auto board test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Uart auto board test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>BOARD | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Connect the serial cable between the PC and board</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> <li class='parameter_li'><span class='parameter_name'>port</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> PC serial port</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>The embedded software is a software loopback. Cooltester send a data, receive it and compare the data</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><br /><span class='test_section_main'> <a name='HAL'> <h1> HAL :</h1> </a></span><span class='text_main'> <a name='10'> <h2> Uart Auto Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Uart Auto Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>HAL | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>NONE</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> <li class='parameter_li'><span class='parameter_name'>bitRate1</span> <span class='parameter_default'> ( default : 115200 )</span> </li><span class='parameter_description'> Bit rate use for all test</span> <li class='parameter_li'><span class='parameter_name'>bitRate2</span> <span class='parameter_default'> ( default : 57600 )</span> </li><span class='parameter_description'> Bit rate use for the change bitrate test</span> <li class='parameter_li'><span class='parameter_name'>enable_BigPacket_Test</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Enable the big packet test and Fifo overflow</span> <li class='parameter_li'><span class='parameter_name'>enable_CtlFlows_Test</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Enable auto control flow test</span> <li class='parameter_li'><span class='parameter_name'>enable_Data_Transmit_Parameter_Test</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Enable the 7 bits test and BitRate change</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>HAL test on loopback mode. UART mode are tested (DMA, IRQ, Pool), 8-7bits mode, baudrate change, Control flow, FIFO overflow, Big packet for DMA mode</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'></td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Lilian</td></tr></table><br /><br /><span class='test_section_main'> <a name='PROTO'> <h1> PROTO :</h1> </a></span><span class='text_main'> <a name='11'> <h2> Proto Auto Attach Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Proto Auto Attach Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>PROTO | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Plug an antenna or connect the RF to the CMU + a SIM card</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> <li class='parameter_li'><span class='parameter_name'>start</span> <span class='parameter_default'> ( default : 4059165169 )</span> </li><span class='parameter_description'> 1:Attach, 0:Detach. This parameter MUST be specified because the default value wont be interpreted by the embedded test.</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>gprs attach or detach</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'>Failed or successed.</td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Proto_Auto_Attach.new( {:start=>1} ).process <br /> </td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>jba</td></tr></table><br /><span class='text_main'> <a name='12'> <h2> Proto Auto BER Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Proto Auto BER Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>PROTO | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Must be used with a .lod including GTES and with the Proto Auto Call test previously registerd. This test must be run on a PC connected to CMU and Fading simulator via GPIB. Obviously, the CMU and the Fading simulator must be on before running the test( Unless you run it only in static conditions). Furthermore, you be sure you use the specfic BER SIM CARD when running this test. This test is based on cmu.rb, gpib.rb and abfs.rb module.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>band</span> <span class='parameter_default'> ( default : 2 )</span> </li><span class='parameter_description'> Band mode : 1 is GSM850, 2 is GSM900, 3 is DCS1800 and 4 is PCS1900</span> <li class='parameter_li'><span class='parameter_name'>level</span> <span class='parameter_default'> ( default : 104 )</span> </li><span class='parameter_description'> dB alleviation</span> <li class='parameter_li'><span class='parameter_name'>arfcn</span> <span class='parameter_default'> ( default : 40 )</span> </li><span class='parameter_description'> Arfcn number</span> <li class='parameter_li'><span class='parameter_name'>speech</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Speech mode : 0 is Full Speech Rate, 1 is Enhanced Full Speech Rate,2 is Half Rate Speech and >=3 is AMR.</span> <li class='parameter_li'><span class='parameter_name'>bool_static</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in static conditions</span> <li class='parameter_li'><span class='parameter_name'>bool_tu50</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in Typical Urban conditions at 50 kilometers</span> <li class='parameter_li'><span class='parameter_name'>bool_ra250</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in Rural Area conditions at 250 kilometers ( TGV conditions)</span> <li class='parameter_li'><span class='parameter_name'>bool_ht100</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in Hilly Terrain conditions at 100 kilometers</span> <li class='parameter_li'><span class='parameter_name'>frames</span> <span class='parameter_default'> ( default : 10000 )</span> </li><span class='parameter_description'> Number of frames which will be processed</span> <li class='parameter_li'><span class='parameter_name'>amr_bitrate</span> <span class='parameter_default'> ( default : 0 )</span> </li><span class='parameter_description'> The bit rate of the AMR speech codec</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Run a typical BER test with the specified options, in a fully automatic way. The CMU and the fading simulator will behave in 'remote control' during the test. The CMU will wait phone signalling. In the same time, the phone will be restarted automatically. Then CoolTester will be intialized. Once the CMU have got the signalling signal from MS, it waits for MS synchronization. Next, the MS intiates a call. If it sucessed, the required BER will be processed in order : static, tu50, ra250, ht100. </td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'> Test Conditions : ... <br><ul class= 'parameter_ul'><li>Number of frames evaluated : ...</li><li>Alpha : ...[limit ...]</li><li>Frame error rate : ...% [limit ...%]</li><li>Class Ib residual bit error:  ...% [limit ...%]</li><li>Class II residual bit error: ...% [limit ...%]<br> : PASS or FAILED</li></ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Proto_Auto_Ber.new( {:bool_static=>false,bool_tu50=>false} ).process <br / > We ask to do a BER on 2 band, with -104dB level, on arfcn 40, in EFS, with 10000 frames, strictly in RA250 and HT100 conditions.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Matthieu</td></tr></table><br /><span class='text_main'> <a name='13'> <h2> Proto Auto Call Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Proto Auto Call Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>PROTO | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Plug an antenna or connect the RF to the CMU + a SIM card</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>timeout</span> <span class='parameter_default'> ( default : 10s )</span> </li><span class='parameter_description'> Timeout for the test execution</span> <li class='parameter_li'><span class='parameter_name'>start</span> <span class='parameter_default'> ( default : 4059165169 )</span> </li><span class='parameter_description'> 1:Start, 0:Stop. This parameter MUST be specified because the default value wont be interpreted by the embedded test.</span> <li class='parameter_li'><span class='parameter_name'>number</span> <span class='parameter_default'> ( default : 0155331616 )</span> </li><span class='parameter_description'> Called phone number</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Start/End a call with the given call number :number. The test records messages from API task to MMI task and updates a state machine with connected / disconnected state. The test compares this state with the expected one and gives a result.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'>Failed or successed. If failed, you got a log of messages from API task to MMI task.</td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Proto_Auto_Call.new( {:start=>1, number=>'112'} ).process <br /> Call emergency.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Matthieu</td></tr></table><br /><span class='text_main'> <a name='14'> <h2> Proto Auto Multi Call Light Edition Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Proto Auto Multi Call Light Edition Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>PROTO | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>MS must be camped on Tester or Network</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>nb_calls</span> <span class='parameter_default'> ( default : 2 )</span> </li><span class='parameter_description'> Number of calls to be performed.</span> <li class='parameter_li'><span class='parameter_name'>dial_number</span> <span class='parameter_default'> ( default : 666 )</span> </li><span class='parameter_description'> Called phone number</span> <li class='parameter_li'><span class='parameter_name'>call_duration</span> <span class='parameter_default'> ( default : 4 )</span> </li><span class='parameter_description'> Duration of each call in seconds</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Performs N :nb_calls calls with the given call number :number. For each call the test records messages from API task to MMI task and updates a state machine with connected / disconnected state. The test compares this state with the expected one and gives a result. If one call fails the test fails.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'>Pass or Fail. If failed, you got a log of messages from API task to MMI task.</td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Proto_Auto_Multi_Call_LE.new( {:nb_calls=>12, number=>'112'} ).process <br /> Call emergency.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Laurent</td></tr></table><br /><span class='text_main'> <a name='15'> <h2> Proto Auto Multi Call Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Proto Auto Multi Call Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>PROTO | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Connect the CMU200 + a SIM card</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>band</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Band mode : 1 is GSM, 2 is DCS and 3 is PCS</span> <li class='parameter_li'><span class='parameter_name'>level</span> <span class='parameter_default'> ( default : 85 )</span> </li><span class='parameter_description'> dB alleviation</span> <li class='parameter_li'><span class='parameter_name'>arfcn</span> <span class='parameter_default'> ( default : 32 )</span> </li><span class='parameter_description'> Arfcn number</span> <li class='parameter_li'><span class='parameter_name'>speech_mode</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Speech mode : 0 is Full Speech Rate, 1 is Enhanced Full Speech Rate and 2 is Half Rate Speech.</span> <li class='parameter_li'><span class='parameter_name'>nb_calls</span> <span class='parameter_default'> ( default : 10 )</span> </li><span class='parameter_description'> Number of calls to be performed.</span> <li class='parameter_li'><span class='parameter_name'>dial_number</span> <span class='parameter_default'> ( default : 666 )</span> </li><span class='parameter_description'> Called phone number</span> <li class='parameter_li'><span class='parameter_name'>call_duration</span> <span class='parameter_default'> ( default : 10 )</span> </li><span class='parameter_description'> Duration of each call in seconds</span> <li class='parameter_li'><span class='parameter_name'>call_mode</span> <span class='parameter_default'> ( default : 0 )</span> </li><span class='parameter_description'> Type of call : 0 is MO call, 1 is MT call, 2 alternates between MO and MT</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Performs N :nb_calls calls with the given call number :number. For each call the test records messages from API task to MMI task and updates a state machine with connected / disconnected state. The test compares this state with the expected one and gives a result. If one call fails the test fails.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'>Pass or Fail. If failed, you got a log of messages from API task to MMI task.</td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Proto_Auto_Multi_Call.new( {:nb_calls=>12, number=>'112'} ).process <br /> Call emergency.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>Laurent</td></tr></table><br /><span class='text_main'> <a name='16'> <h2> Proto Auto PDCH BLER Test :</h2> </a></span><table class='test'><tr bgcolor=#d0d0d0><td class='description'>Name</td><td class='center_content'><span class='test_name'>Proto Auto PDCH BLER Test</span> ( 1.0 )</td></tr><tr bgcolor=#f0f0f0><td class='description'>Environement | Type</td><td class='center_content'>PROTO | AUTO </td></tr><tr bgcolor=#d0d0d0><td class='description'>Prerequisites</td><td class='justify_content'>Must be used with a .lod including GTES and with the Proto Auto Attach test previously registerd. This test must be run on a PC connected to CMU and Fading simulator via GPIB. Obviously, the CMU and the Fading simulator must be on before running the test( Unless you run it only in static conditions). Furthermore, you be sure you use the specfic BER SIM CARD when running this test. This test is based on cmu.rb, gpib.rb and abfs.rb module.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Parameters</td><td class='justify_content'><ul><li class='parameter_li'><span class='parameter_name'>band</span> <span class='parameter_default'> ( default : 2 )</span> </li><span class='parameter_description'> Band mode : 1 is GSM850, 2 is GSM900, 2 is DCS and 3 is PCS</span> <li class='parameter_li'><span class='parameter_name'>arfcn</span> <span class='parameter_default'> ( default : 40 )</span> </li><span class='parameter_description'> Arfcn number</span> <li class='parameter_li'><span class='parameter_name'>cs</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Coding Scheme : 1 is CS1, 2 is CS2, 3 is CS3 and 4 is CS4.</span> <li class='parameter_li'><span class='parameter_name'>bool_static</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in static conditions</span> <li class='parameter_li'><span class='parameter_name'>bool_tu50</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in Typical Urban conditions at 50 kilometers</span> <li class='parameter_li'><span class='parameter_name'>bool_ra250</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in Rural Area conditions at 250 kilometers ( TGV conditions)</span> <li class='parameter_li'><span class='parameter_name'>bool_ht100</span> <span class='parameter_default'> ( default : false )</span> </li><span class='parameter_description'> Run the BER in Hilly Terrain conditions at 100 kilometers</span> <li class='parameter_li'><span class='parameter_name'>rlc_blocks</span> <span class='parameter_default'> ( default : 1000 )</span> </li><span class='parameter_description'> Number of RLC blocks that will be processed</span> <li class='parameter_li'><span class='parameter_name'>nb_slots</span> <span class='parameter_default'> ( default : 1 )</span> </li><span class='parameter_description'> Number of used Rx time slots</span> </ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Test coverage</td><td class='justify_content'>Run a typical BLER test with the specified options, in a fully automatic way. The CMU and the fading simulator will behave in 'remote control' during the test. The CMU will wait phone signalling. In the same time, the phone will be restarted automatically. Then CoolTester will be intialized. Once the CMU have got the signalling signal from MS, it waits for MS synchronization and attachement. Next, the CMU intiates a TBF dowlink. If it sucessed, the required BER will be processed in order : static, tu50, ra250, ht100. </td></tr><tr bgcolor=#f0f0f0><td class='description'>Results</td><td class='justify_content'> Test Conditions : ... <br><ul class= 'parameter_ul'><li>Number of RLC blokcs : ...</li><li>Block error rate : ...% [limit ...%]</li><li><br> : PASS or FAILED</li></ul></td></tr><tr bgcolor=#d0d0d0><td class='description'>Example</td><td class='left_content'>puts Proto_Auto_PDCH_Bler.new( {:bool_static=>false,bool_tu50=>false} ).process <br / > We ask to do a BLER on 2 band, on arfcn 40, in CS1, with 1000 rlc blocks on one Rx slot, strictly in RA250 and HT100 conditions.</td></tr><tr bgcolor=#f0f0f0><td class='description'>Author</td><td class='justify_content'>jba</td></tr></table><br />